* Jupyter Lab + PyDrake + Meshcat

/Host Jupyter lab notebooks with access to PyDrake and Meshcat/

** Usage

1. Clone this repo and ~cd~ to it

2. You've got two options to run the container.

   a. Build the image and spin it up
      #+begin_src shell :tangle no :padline no
      docker build \
          --build-arg UID=$(id -u) \
          --build-arg GID=$(id -g) \
          --build-arg UNAME=$USER \
          . -t jdm:latest
      docker run -it \
          -p 8888:8888 -p 7000:7000 \
          -v $PWD/sample:/jupyter/sample \
          --user $(id -u):$(id -g) \
          jdm:latest
      #+end_src
   b. Just use ~docker-compose~: ~UID=${UID} GID=${GID} docker-compose up --build~ (you only need the ~--build~ the first time)

3. Follow the prompts to open Jupyter Lab in your browser. Then check out =sample/intro.ipynb= which demonstrates sample interactions with Drake and Meshcat.

4. The docker-compose file and sample ~docker run~ command above both mount the =sample/= directory into the container. Feel free to change it to any other directory on your machine. We also ensure that Jupyter doesn't change file permissions, so you should have no problem with the permissions of any notebooks you create or modify in Jupyter.

** Development

This repo uses literate programming - the source code for the Dockerfile and docker-compose.yml file are written below and tangled to their final destinations.

*** Dockerfile

The =drake= image /seems/ to be more system agnostic than the =manipulation= [[https://github.com/RussTedrake/manipulation/blob/master/setup/docker/Dockerfile][image]] from the MIT 6.843 [[https://manipulation.mit.edu/Fall2021/index.html#readings/assignments][problem sets]], which are meant to run on deepnote.com. There are some helpful visualization python libraries in =manipulation=, so we'll copy them over.

# see
#+begin_src dockerfile :tangle Dockerfile
FROM russtedrake/manipulation:latest as manipulation
FROM robotlocomotion/drake:focal as drake
#+end_src

Install system dependencies. Use [[https://github.com/krallin/tini][tini]] as an init system (idea borrowed from [[p][here]]).

#+begin_src dockerfile :tangle Dockerfile
RUN apt-get update && apt-get upgrade -y && apt install -y \
    build-essential \
    nginx \
    python3-dev \
    python3-venv \
    xvfb

# Add Tini. Tini operates as a process subreaper for jupyter. This prevents kernel crashes.
ADD https://github.com/krallin/tini/releases/download/v0.19.0/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini
#+end_src

Create a user that matches the host UID and GID (simplifies file management for volume mounted directories).

#+begin_src dockerfile :tangle Dockerfile
ARG UNAME=user
ARG UID=1000
ARG GID=1000
RUN groupadd -g $GID -o $UNAME
RUN useradd -m -u $UID -g $GID -o $UNAME && \
  mkdir -p /jupyter && \
  chown -R $UNAME:$UNAME /jupyter
USER $UNAME
#+end_src

Setup the working directory and install python dependencies

#+begin_src dockerfile :tangle Dockerfile
WORKDIR /jupyter
COPY requirements.txt .
RUN python -m venv .venv
RUN .venv/bin/pip install -r requirements.txt
#+end_src

Copy python libraries from =manipulation= to the venv.

#+begin_src dockerfile :tangle Dockerfile
COPY --from=manipulation /opt/manipulation/manipulation/ .venv/lib/python3.8/site-packages/manipulation
#+end_src

Expose ports and run Jupyter lab when the container spins up.

#+begin_src dockerfile :tangle Dockerfile
# default port for jupyter
EXPOSE 8888
# default port for meshcat
EXPOSE 7000

ENTRYPOINT ["/usr/bin/tini", "--"]
CMD [".venv/bin/jupyter", "lab", "--no-browser", "--ip=0.0.0.0"]
#+end_src

*** docker-compose.yml

#+begin_src yaml :tangle docker-compose.yml :padline no
version: "3"
services:
  app:
    build: .
    ports:
      - 8888:8888
      - 7000:7000
    volumes:
      - ./sample:/jupyter/sample
#+end_src

Use your own UID and GID in Jupyter to simplify notebook file permissions. If you don't do this, all files created in notebooks will be owned by =root=.

#+begin_src yaml :tangle docker-compose.yml :padline no
    user: "${UID}:${GID}"
    group_add:
      - users
    #+end_src
